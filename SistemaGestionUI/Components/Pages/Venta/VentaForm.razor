@inject NavigationManager NavigationManager
@inject VentasService Service
@inject ProductosService ServicePro
@inject UsuariosService ServiceUsuario
@inject ProductosVendidosService ProductosVendidosService
@inject IJSRuntime JS

<h3>Formulario de Venta</h3>
                    
<EditForm Model="Venta" OnValidSubmit="CreateOrUpdateVenta" FormName="venta-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="comentarios">
            Comentarios
            <InputTextArea type="text" class="form-control" id="nombre" @bind-Value="Venta.Comentarios" />
        </label>
    </div>

    <div class="form-group">
        <label for="idUsuario">
            Seleccionar Usuario
            <InputSelect class="form-control" id="idUsuario" @bind-Value="Venta.UsuarioId">
                <option value="">Seleccione un usuario</option>
                @foreach (var usuario in usuariosDisponibles)
                {
                    <option value="@usuario.Id">@usuario.Nombre (@usuario.Id)</option>
                }
            </InputSelect>
        </label>
    </div>
  
    <div class="row">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Descripcion</th>
                    <th>Precio de Venta</th>
                    <th>Stock</th>
                    <th>Cantidad</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (Producto producto in productosDisponibles)
                {
                    <tr>                                                
                        <td>@producto.Descripcion</td>
                        <td>@producto.PrecioVenta</td>
                        <td>@producto.Stock</td>                                                
                        <td>
                            <InputNumber type="number" class="form-control" id="idProducto" width=50% @bind-Value="producto.Cantidad" min=0 max="@producto.Stock" />                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="form-group mt-4">        
        <button type="submit" class="btn btn-primary mr-2">Guardar</button>
        <button type="button" class="btn btn-dark ml-2" @onclick="Cancel">Cancelar</button>
    </div>

</EditForm>

@code {

    [Parameter]
    public Venta? Venta { get; set; }
    public List<Producto> productosDisponibles = new List<Producto>();
    public List<Usuario> usuariosDisponibles = new List<Usuario>();
    public ProductosVendidos? productosVendidos { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        usuariosDisponibles = await ServiceUsuario.ListUsers();

        var productos = await ServicePro.ListProducts();
        productosDisponibles = productos.Where(p => p.Stock > 0).ToList();

    }

    public async Task CreateOrUpdateVenta()
    {
        // Validar si no se ha seleccionado un usuario
        if ( Venta.UsuarioId == 0)
        {            
            await JS.InvokeVoidAsync("alert", "Por favor, seleccione un usuario antes de continuar.");
            return;
        }

        bool lError         = false;
        string mensajeError = "";

        // Validar que no haya productos con cantidad mayor al stock
        foreach (var producto in productosDisponibles)
        {
            if (producto.Cantidad > producto.Stock)
            {
                lError = true;
                mensajeError += $"El producto {producto.Descripcion} tiene una cantidad mayor al stock disponible.\n";
            }
        }

        // Validar que al menos un producto tenga cantidad mayor a 0
        if (!productosDisponibles.Any(p => p.Cantidad > 0))
        {
            lError = true;
            mensajeError += "Debe ingresar una cantidad mayor a 0 para al menos un producto.\n";
        }

        // Si hay errores, mostrar un mensaje de alerta
        if (lError)
        {
            await JS.InvokeVoidAsync("alert", mensajeError);
            return;
        }

        if (Venta.Id > 0)
        {
            await Service.ModificarVenta(Venta.Id, Venta);

        }
        else
        {

            // Crear la venta y obtener el ID generado
            Venta nuevaVenta = await Service.CrearVenta(Venta);
            int ventaId = nuevaVenta.Id;

            // Insertar productos vendidos solo si la cantidad es mayor a 0
            foreach (var producto in productosDisponibles.Where(p => p.Cantidad > 0))
            {
                var productoVendido = new ProductosVendidos();

                var stock = producto.Stock - producto.Cantidad;

                productoVendido.IdVenta    = ventaId;
                productoVendido.IdProducto = producto.Id;
                productoVendido.Cantidad   = producto.Cantidad;
                productoVendido.Stock      = stock;

                // Llamar al servicio para agregar productos vendido8s
                await ProductosVendidosService.CrearProductoVendido(productoVendido);

                // Llamar al servicio para actulizar el stock de los productos vendidos
                var productoAux = await ServicePro.GetOneProduct(producto.Id);
                productoAux.Stock = stock;
                await ServicePro.UpdateProduct(producto.Id, productoAux);

            }

        }

        NavigationManager.NavigateTo("/ventas");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/ventas");
    }

   
}
